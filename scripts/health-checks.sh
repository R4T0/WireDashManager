
#!/bin/bash

# =============================================================================
# WireDash Health Checks
# Verifica√ß√£o completa de sa√∫de dos servi√ßos e informa√ß√µes finais
# =============================================================================

# Carregar utilit√°rios
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/deploy-utils.sh"

test_database_connectivity() {
    print_color $BLUE "üóÑÔ∏è Testando conectividade do PostgreSQL..."
    
    # Teste b√°sico de conex√£o
    if docker exec wiredash-postgres pg_isready -U postgres >/dev/null 2>&1; then
        print_color $GREEN "‚úÖ PostgreSQL respondendo"
    else
        print_color $RED "‚ùå PostgreSQL n√£o est√° respondendo"
        return 1
    fi
    
    # Teste de conex√£o ao banco de dados
    if docker exec wiredash-postgres psql -U postgres -d wireguard_manager -c "SELECT 1;" >/dev/null 2>&1; then
        print_color $GREEN "‚úÖ Banco de dados wireguard_manager acess√≠vel"
    else
        print_color $RED "‚ùå Banco de dados wireguard_manager n√£o acess√≠vel"
        return 1
    fi
    
    # Verificar tabelas b√°sicas
    local table_count=$(docker exec wiredash-postgres psql -U postgres -d wireguard_manager -t -c "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema='public';" 2>/dev/null | tr -d ' ')
    if [ "$table_count" -gt 0 ]; then
        print_color $GREEN "‚úÖ Tabelas encontradas no banco: $table_count"
    else
        print_color $YELLOW "‚ö†Ô∏è Nenhuma tabela encontrada (primeira execu√ß√£o?)"
    fi
    
    return 0
}

test_backend_api() {
    print_color $BLUE "‚öôÔ∏è Testando API do Backend..."
    
    # Teste de health check
    if curl -f -s --max-time 10 "http://localhost:3000/health" >/dev/null 2>&1; then
        print_color $GREEN "‚úÖ Backend health check OK"
    else
        print_color $RED "‚ùå Backend health check falhou"
        return 1
    fi
    
    # Teste de rota b√°sica da API
    local api_response=$(curl -s --max-time 10 "http://localhost:3000/api" 2>/dev/null || echo "")
    if [ -n "$api_response" ]; then
        print_color $GREEN "‚úÖ API do Backend respondendo"
    else
        print_color $YELLOW "‚ö†Ô∏è API do Backend n√£o respondeu (pode ser normal se n√£o houver rota /api)"
    fi
    
    return 0
}

test_frontend_app() {
    print_color $BLUE "üåê Testando aplica√ß√£o Frontend..."
    
    # Teste de acesso √† p√°gina principal
    if curl -f -s --max-time 10 "http://localhost:8080" >/dev/null 2>&1; then
        print_color $GREEN "‚úÖ Frontend acess√≠vel"
    else
        print_color $RED "‚ùå Frontend n√£o acess√≠vel"
        return 1
    fi
    
    # Verificar se retorna HTML v√°lido
    local content_type=$(curl -s -I --max-time 10 "http://localhost:8080" 2>/dev/null | grep -i content-type | cut -d' ' -f2- | tr -d '\r\n')
    if echo "$content_type" | grep -q "text/html"; then
        print_color $GREEN "‚úÖ Frontend retornando HTML"
    else
        print_color $YELLOW "‚ö†Ô∏è Frontend n√£o retornando HTML esperado"
    fi
    
    return 0
}

test_container_resources() {
    print_color $BLUE "üìä Verificando recursos dos containers..."
    
    # Verificar uso de CPU e mem√≥ria
    print_color $YELLOW "üíª Uso de recursos:"
    docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}" || true
    echo ""
    
    # Verificar logs de erro
    print_color $BLUE "üìã Verificando logs de erro..."
    local containers=("wiredash-postgres" "wiredash-backend" "wiredash-selfhosted")
    local error_found=false
    
    for container in "${containers[@]}"; do
        if docker logs --tail=20 "$container" 2>&1 | grep -i -E "(error|failed|exception)" >/dev/null; then
            print_color $YELLOW "‚ö†Ô∏è Poss√≠veis erros encontrados nos logs de $container"
            error_found=true
        fi
    done
    
    if [ "$error_found" = false ]; then
        print_color $GREEN "‚úÖ Nenhum erro cr√≠tico encontrado nos logs"
    fi
    
    return 0
}

show_system_info() {
    print_header "Informa√ß√µes do Sistema"
    
    # Informa√ß√µes b√°sicas
    print_color $CYAN "üñ•Ô∏è Sistema Operacional:"
    uname -a
    echo ""
    
    print_color $CYAN "üê≥ Vers√£o do Docker:"
    docker --version
    docker-compose --version
    echo ""
    
    # Informa√ß√µes dos containers
    print_color $CYAN "üì¶ Status dos Containers:"
    docker-compose ps
    echo ""
    
    # Uso de espa√ßo
    print_color $CYAN "üíæ Uso de Espa√ßo:"
    docker system df
    echo ""
}

show_access_info() {
    print_header "Informa√ß√µes de Acesso"
    
    print_color $GREEN "üåê Aplica√ß√£o WireDash:"
    print_color $BLUE "   URL: http://localhost:8080"
    print_color $BLUE "   Descri√ß√£o: Interface web principal"
    echo ""
    
    print_color $GREEN "‚öôÔ∏è API Backend:"
    print_color $BLUE "   URL: http://localhost:3000"
    print_color $BLUE "   Health Check: http://localhost:3000/health"
    print_color $BLUE "   Descri√ß√£o: API REST do backend"
    echo ""
    
    print_color $GREEN "üóÑÔ∏è PostgreSQL Database:"
    print_color $BLUE "   Host: localhost"
    print_color $BLUE "   Porta: 5432"
    print_color $BLUE "   Usu√°rio: postgres"
    print_color $BLUE "   Senha: postgres"
    print_color $BLUE "   Database: wireguard_manager"
    print_color $BLUE "   Conex√£o: psql -h localhost -U postgres -d wireguard_manager"
    echo ""
}

show_management_commands() {
    print_header "Comandos de Gerenciamento"
    
    print_color $YELLOW "üìã Comandos √öteis:"
    echo "   Parar tudo:           docker-compose down"
    echo "   Parar e limpar:       docker-compose down -v"
    echo "   Ver logs:             docker-compose logs -f"
    echo "   Ver logs espec√≠fico:  docker-compose logs -f [wiredash-app|wiredash-backend|postgres]"
    echo "   Reiniciar:            docker-compose restart"
    echo "   Status:               docker-compose ps"
    echo "   Entrar no container:  docker exec -it [container-name] bash"
    echo ""
    
    print_color $YELLOW "üíæ Backup e Restore:"
    echo "   Fazer backup:         ./backup.sh"
    echo "   Restaurar backup:     ./restore.sh <arquivo.sql>"
    echo "   Localiza√ß√£o backups:  ./backups/"
    echo ""
    
    print_color $YELLOW "üîß Manuten√ß√£o:"
    echo "   Rebuild aplica√ß√£o:    ./deploy-selfhosted.sh"
    echo "   Limpar sistema:       docker system prune -a"
    echo "   Ver uso de espa√ßo:    docker system df"
    echo ""
}

show_troubleshooting() {
    print_header "Solu√ß√£o de Problemas"
    
    print_color $YELLOW "üêõ Se algo n√£o estiver funcionando:"
    echo ""
    echo "1. Verificar logs dos containers:"
    echo "   docker-compose logs -f"
    echo ""
    echo "2. Verificar se todas as portas est√£o livres:"
    echo "   netstat -tulpn | grep -E ':(8080|3000|5432)'"
    echo ""
    echo "3. Restart completo:"
    echo "   docker-compose down"
    echo "   docker-compose up -d"
    echo ""
    echo "4. Limpar e reinstalar:"
    echo "   docker-compose down -v"
    echo "   docker system prune -a"
    echo "   ./deploy-selfhosted.sh"
    echo ""
    echo "5. Verificar recursos do sistema:"
    echo "   df -h          # Espa√ßo em disco"
    echo "   free -h        # Mem√≥ria RAM"
    echo "   docker stats   # Uso pelos containers"
    echo ""
}

check_services_health() {
    print_header "Verifica√ß√£o de Sa√∫de dos Servi√ßos"

    local errors=0

    # Teste de conectividade do banco
    if ! test_database_connectivity; then
        ((errors++))
    fi
    echo ""

    # Teste da API do backend
    if ! test_backend_api; then
        ((errors++))
    fi
    echo ""

    # Teste do frontend
    if ! test_frontend_app; then
        ((errors++))
    fi
    echo ""

    # Teste de recursos
    test_container_resources
    echo ""

    # Resultado dos testes
    if [ $errors -eq 0 ]; then
        print_color $GREEN "üéâ Todos os testes de sa√∫de passaram!"
        
        # Mostrar informa√ß√µes do sistema
        show_system_info
        
        # Mostrar informa√ß√µes de acesso
        show_access_info
        
        # Mostrar comandos de gerenciamento
        show_management_commands
        
        # Informa√ß√µes de troubleshooting
        show_troubleshooting
        
        # Perguntar se quer abrir no browser
        if command_exists xdg-open; then
            echo ""
            if confirm_action "Deseja abrir a aplica√ß√£o no navegador?"; then
                xdg-open http://localhost:8080 >/dev/null 2>&1 &
            fi
        elif command_exists open; then
            echo ""
            if confirm_action "Deseja abrir a aplica√ß√£o no navegador?"; then
                open http://localhost:8080 >/dev/null 2>&1 &
            fi
        fi
        
        return 0
    else
        print_color $RED "‚ùå $errors teste(s) de sa√∫de falharam"
        echo ""
        print_color $YELLOW "üí° Dicas para resolver problemas:"
        echo "1. Verifique os logs: docker-compose logs -f"
        echo "2. Reinicie os servi√ßos: docker-compose restart"
        echo "3. Verifique se as portas est√£o livres"
        echo "4. Verifique recursos do sistema (RAM, disco)"
        return 1
    fi
}

# Executar se chamado diretamente
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    check_services_health
fi
